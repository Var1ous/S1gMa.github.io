import sensor, image, time, math
import gc,mjpeg
import json,uos
import machine

sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
from machine import UART
EXPOSURE_TIME_SCALE = 0.06
sensor.set_auto_gain(False)
sensor.set_auto_whitebal(False)
current_exposure_time_in_microseconds = sensor.get_exposure_us()
sensor.set_auto_exposure(False, \
    exposure_us = int(current_exposure_time_in_microseconds * EXPOSURE_TIME_SCALE))
clock = time.clock()
sensor.skip_frames(time = 500)
thresholds = (97, 69, -81, -36, 80, -33)
crop_x = 67
crop_y = 82
crop_w = 203
crop_h = 159
roi = (67,82,203,159)

uart = UART(3,115200)
uart.init(115200, bits=8, parity=None, stop=1)


def find_max(blobs):
    max_size=0
    for blob in blobs:
        if blob[2]*blob[3] > max_size:
            max_blob=blob
            max_size = blob[2]*blob[3]
    return max_blob
def is_circle(blob):
    area = blob.pixels()
    perimeter = blob.perimeter()
    if area > 0:
        circularity = (perimeter ** 2) / (4 * math.pi * area)
        return circularity < 1.3
    return False

while(True):
    clock.tick()
    fps = clock.fps()
    img = sensor.snapshot()
    img.lens_corr(strength = 0.5,zoom = 3,x_corr=-0.0349,y_corr=0.0830)
    roi = img.crop((crop_x, crop_y, crop_w, crop_h))
    blobs = roi.find_blobs([(thresholds)],merge=True,roi = (crop_x,crop_y,crop_w,crop_h))
    if blobs:
            blob = find_max(blobs)
            data=[]
            if blob:

                img.draw_circle(blob.cx(), blob.cy(),2, color=(255, 0, 0),thickness=2)
                img.draw_cross(blob.cx(), blob.cy(), color=(255, 0, 0))
                img.draw_string(10, 10, "FPS: {}".format(clock.fps()), color=(255, 0, 0))
                img.draw_string(10, 225, "({}".format(blob.cx()), color=(255, 0, 0))
                img.draw_string(40, 225, ",{})".format(blob.cy()), color=(255, 0, 0))
                x = blob.cx()
                y = blob.cy()
                print(x)
                print(y)
                FH = bytearray([0xb3,0xb4,x,y,0x01,0x01,0xb5,0xb6])
                uart.write(FH)

    else:
        print("not found!")
    del img
    gc.collect()
